{spawn, fork} = require 'child_process'
fs = require 'fs'

inDir = './src' # directory containing gulp, npm and bower coffee files
outDir = './'
pyethGit = 'https://github.com/kaustavha/pyethereum.git'
serpentGit = 'https://github.com/ethereum/serpent.git'
su = {uid: 0} # uid 0 -> root, uid 1000 -> user

option '-s', '--skip', 'skip everything, just run gulp'
option '-t', '--tools', 'convert the json.coffee files and install the npm and bower deps then start'

# Convenience function for logging - todo: better err. handling
log = (msg) ->
    console.log msg

# Function to run spawnable cmdline commands
# If 3 args are provided the last arg is set to be the callback
run = (spawnable, args=[], options, cb) ->
    if arguments.length is 3
        cb = options
        options = {}
    options.stdio = 'inherit'
    cmd = spawn spawnable, args, options
    cmd.on 'data', (data) -> log data
    cmd.on 'message', (msg) -> log msg
    cmd.on 'exit', (res) ->
        if res is 0
            log 'Ran ' + spawnable + ' ' + args
            cb() if cb
        else
            process.exit(res)

# Function to fix .json packages converted from .coffee
fixPkg = (dir, name, cb) ->
    log 'Fixing JSON packages'
    file = dir + name + '.json'
    log file + '.js'
    fs.rename file + '.js', file, (err) ->
        return log err if err
        fs.readFile file, (err, data) ->
            return log err if err
            data = data.toString() # stringify buffer            
            pos = data.indexOf '\n' # position of end of first line which is 'generated by coffescript ver. no.'
            if pos isnt -1
                data = data.substr pos + 2 #extract desired string, pos + 2 is done to remove /n and (
                data = data.substr 0, data.length - 3 # remove ); at end
                fs.writeFile file, data, (err) ->
                    log err if err
                    cb() if cb
            else
                log 'Unexpected end or beginning of file' + file

toolsToJS = (cb) ->
    run 'coffee', ['-b', '-o', outDir, '-c', inDir], ->
        fixPkg outDir, 'bower', ->
            fixPkg outDir, 'package', ->
                if cb then cb() else log 'Converted tool files and fixed JSON'

installDeps = (cb) ->
    run 'apt-get', ['install', 'python-pip', 'git'], su, ->
        run 'npm', ['install', '-g', 'bower'], su, ->
            run 'npm', ['install'], su, ->
                run 'bower', ['install'], {uid: 1000}, ->
            if cb then cb() else log 'Installed dependencies'

installJSON = (cb) ->
    run 'npm', ['install'], su, ->
        run 'bower', ['install'], {uid: 1000}, ->
            if cb then cb() else log 'Installed npm dependencies'


getEthereum = (cb) ->
    s = {uid: 0, cwd: './pyethereum'}
    run 'rm', ['-rf', './pyethereum'], su, ->
        run 'git', ['clone', pyethGit], ->
            run 'pip', ['install', '-r', 'requirements.txt'], s, ->
                run 'wget', ['http://downloads.buildout.org/2/bootstrap.py'], s, ->
                    run 'python', ['bootstrap.py', '-v', '2.1.1'], s, ->
                        run './bin/buildout', [], s, ->
                            if cb then cb() else log 'Installed pyethereum'

getSerpent = (cb) ->
    run 'rm', ['-rf', './serpent'], su, ->
        run 'git', ['clone', serpentGit], ->
            run 'python', ['setup.py', 'install'], {uid: 0, cwd: './serpent'}, ->
                if cb then cb() else log 'Installed serpent'

start = (cb) ->
    run 'mongod', [], su, -> log 'Exiting mongod'
    log 'Starting a server on localhost:3000'
    run 'gulp', ['build'], ->
        if cb then cb() else log 'Done, started mongoDB and server'

task 'build', 'copy and transpile tool files, i.e gulp, bower & npm package, and run gulp', (options) ->
    if options.skip
        start()
    else if options.tools
        toolsToJS ->
            installJSON ->
                start()
    else
        toolsToJS ->
            installDeps ->
                getSerpent ->
                    getEthereum ->
                        start ->
                            log 'Bye :)'
