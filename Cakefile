{spawn, fork} = require 'child_process'
fs = require 'fs'
path = require 'path'

option '-s', '--skip', 'skip everything, just run gulp'
option '-t', '--tools', 'convert the json.coffee files and install the npm and bower deps then start'
option '-p', '--pyeth', 'install pyethereum and serpent'

appName = 'eth-ui'
inDir = './src/' # directory containing gulp, npm and bower coffee files
outDir = './'
pyethGit = 'https://github.com/ethereum/pyethereum.git'
serpentGit = 'https://github.com/ethereum/serpent.git'
su = {uid: 0} # uid 0 -> root, uid 1000 -> user
nwv = '0.9.2' # node webkit version to use

# Convenience function for logging - todo: better err. handling
log = (msg) ->
    console.log msg

# Function to run spawnable cmdline commands
# If 3 args are provided the last arg is set to be the callback
run = (spawnable, args=[], options, cb) ->
    if arguments.length is 2
        options = {}
    if arguments.length is 3 and typeof options is 'function'
        cb = options
        options = {}
    options.stdio = 'inherit'
    cmd = spawn spawnable, args, options
    cmd.on 'data', (data) -> log data
    cmd.on 'message', (msg) -> log msg
    cmd.on 'exit', (res) ->
        if res is 0
            log 'Ran ' + spawnable + ' ' + args
            cb() if cb
        else
            process.exit(res)

runQueue = (arr=[]) ->
    func = arr.pop
    cmd = func[1]
    args = func[2]
    if func.length is 2 then opts = {} else opts = func[3]
    run cmd, args, opts, runQueue(arr)

#lifted from wrench.js
readdirSyncRecursive = (baseDir) ->
    baseDir = baseDir.replace(/\/$/, "")
    readdirSyncRecursive = (baseDir) ->
        files = []
        curFiles = undefined
        nextDirs = undefined
        isDir = (fname) ->
            if fs.existsSync(path.join(baseDir, fname))
                fs.statSync(path.join(baseDir, fname)).isDirectory()
            else false
        prependBaseDir = (fname) ->
          path.join baseDir, fname

        curFiles = fs.readdirSync(baseDir)
        nextDirs = curFiles.filter(isDir)
        curFiles = curFiles.map(prependBaseDir)
        files = files.concat(curFiles)
        while nextDirs.length
            files = files.concat readdirSyncRecursive path.join baseDir, nextDirs.shift()

        files
    # convert absolute paths to relative
    fileList = readdirSyncRecursive(baseDir).map (val) ->
        path.relative baseDir, val

    fileList

# Function to fix .json packages converted from .coffee
fixPkg = (dir, name, cb) ->
    log 'Fixing JSON packages'
    file = dir + name + '.json'
    log file + '.js'
    fs.rename file + '.js', file, (err) ->
        return log err if err
        fs.readFile file, (err, data) ->
            return log err if err
            data = data.toString() # stringify buffer
            pos = data.indexOf '\n' # position of end of first line which is 'generated by coffescript ver. no.'
            if pos isnt -1
                data = data.substr pos + 2 #extract desired string, pos + 2 is done to remove /n and (
                data = data.substr 0, data.length - 3 # remove ); at end
                fs.writeFile file, data, (err) ->
                    log err if err
                    cb() if cb
            else
                log 'Unexpected end or beginning of file' + file

toolsToJS = (cb) ->
    run 'coffee', ['-b', '-o', outDir, '-c', inDir], {}, ->
        fixPkg outDir, 'bower', ->
            fixPkg outDir, 'package', ->
                log 'Converted tool files and fixed JSON'
                if cb then cb()

installDeps = (cb) ->
    run 'apt-get', ['install', 'python-pip', 'git'], su, ->
        run 'npm', ['install', '-g', 'bower'], su, ->
            run 'npm', ['install'], su, ->
                run 'bower', ['install'], {uid: 1000}, ->
                    log 'Installed dependencies'
                    if cb then cb()

installJSON = (cb) ->
    run 'npm', ['install'], su, ->
        run 'bower', ['install'], {uid: 1000}, ->
            log 'Installed npm dependencies'
            if cb then cb()

getEthereum = (cb) ->
    s = {uid: 0, cwd: './pyethereum'}
    if not fs.existsSync './pyethereum'
        run 'git', ['clone', pyethGit]
    run 'pip', ['install', '-r', 'requirements.txt'], s, ->
        run 'wget', ['http://downloads.buildout.org/2/bootstrap.py'], s, ->
            run 'python', ['bootstrap.py', '-v', '2.1.1'], s, ->
                run './bin/buildout', [], s, ->
                    log 'Installed pyethereum'
                    if cb then cb()

getSerpent = (cb) ->
    if not fs.existsSync './serpent'
        run 'git', ['clone', serpentGit]
    run 'python', ['setup.py', 'install'], {uid: 0, cwd: './serpent'}, ->
        log 'Installed serpent'
        if cb then cb()
    
start = (cb) ->
    run 'mongod', [], su, -> log 'Exiting mongod'
    run 'cp', ['-rf', './lib/*', './build/lib/'], su, -> log 'cp'
    run 'gulp', ['default'], ->
        log 'Done, started server'
        if cb then cb()

getNodeWebkit = (cb) ->
    if not fs.existsSync './nw'
        run 'wget', ['http://dl.node-webkit.org/v' + nwv + '/node-webkit-v' + nwv + '-linux-ia32.tar.gz'], su, ->
            run 'tar', ['xvfz', 'node-webkit-v' + nwv + '-linux-ia32.tar.gz'], su, ->
                run 'mv', ['node-webkit-v' + nwv + '-linux-ia32', 'nw'], su, ->
                    log 'Fetched Node-webkit'
                    if cb then cb()
    else
        log 'Node webkit already installed'
        if cb then cb()

startNWgulp = (cb) ->
    run 'cp', ['-rf', './lib/*', './build/lib/'], su, -> log 'cp'
    run 'gulp', ['nw'], ->
        log 'Done, started server'
        if cb then cb()


task 'build', 'copy and transpile tool files, i.e gulp, bower & npm package, and run gulp', (options) ->
        if options.skip
            toolsToJS ->
                start()
        else if options.tools
            toolsToJS ->
                installJSON ->
                    start()
        else if options.pyeth
            toolsToJS ->
                installDeps ->
                    getSerpent ->
                        getEthereum ->
                            installJSON ->
                                start()
        else
            toolsToJS ->
                installDeps ->
                    getSerpent ->
                        getEthereum ->
                            installJSON ->
                                start()


task 'start', 'build the node webkit executable and launch it', ->
    getNodeWebkit ->
        files = readdirSyncRecursive './build'

        nwi = files.indexOf appName + '.nw'
        if nwi isnt -1 # Remove any old nw existence ref
            files.slice nwi, 1
        files.unshift appName + '.nw'

        data = fs.readFileSync './build/index.html'
        data = data.toString()
        while data.indexOf('../') isnt -1
            data = data.replace '../', './'
        fs.writeFileSync './build/index.html', data
        log files
        run 'zip', files, {uid: 0, cwd: './build'}, ->
            run 'mv', ['./build/' + appName + '.nw', './' + appName + '.nw'], su, ->
                run './nw/nw', [appName + '.nw'], su, ->
                    log 'Starting application'


task 'fix:bugs', 'fix startup problems due to improper express and mongo shutdowns', ->
    log 'fixing bugs'
    run 'pkill', ['-9', 'mongod'], su, ->
        log 'pk'
    run 'mongod', ['--repair'], su, ->
        log 'mongo'
    run 'fuser', ['-k', '3000/tcp'], su, ->
        log 'Did my best, try building now'
